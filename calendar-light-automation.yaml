blueprint:
  name: Calendar Meeting Light Status
  description: >
    Sets a light to reflect meeting statusâ€”warns before, indicates during,
    and resets after. Fully customizable colors and durations; optional flashing.
  domain: automation

  input:
    # ----- Calendars (up to 6; leave unused ones empty) -----
    calendar_1:
      name: Calendar 1
      selector:
        entity:
          domain: calendar
    calendar_2:
      name: Calendar 2 (optional)
      default:
      selector:
        entity:
          domain: calendar
    calendar_3:
      name: Calendar 3 (optional)
      default:
      selector:
        entity:
          domain: calendar
    calendar_4:
      name: Calendar 4 (optional)
      default:
      selector:
        entity:
          domain: calendar
    calendar_5:
      name: Calendar 5 (optional)
      default:
      selector:
        entity:
          domain: calendar
    calendar_6:
      name: Calendar 6 (optional)
      default:
      selector:
        entity:
          domain: calendar

    # ----- Targets -----
    light_target:
      name: Light Target
      selector:
        target:
          entity:
            domain: light

    # ----- Timing -----
    reminder_offset:
      name: Reminder time before meeting (turn to transition color)
      default: { minutes: 5 }
      selector: { duration: {} }

    transition_duration:
      name: Transition flash duration (last minutes before start; 0 = no flashing)
      default: { minutes: 1 }
      selector: { duration: {} }

    flash_interval:
      name: Flash interval (seconds)
      description: Only used if transition_duration > 0.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: seconds

    # ----- Colors -----
    base_color:
      name: Base color (no meeting)
      default: [0, 255, 0]
      selector:
        color_rgb: {}

    transition_color:
      name: Transition color (pre-meeting)
      default: [255, 255, 0]
      selector:
        color_rgb: {}

    meeting_color:
      name: Meeting color (during)
      default: [255, 0, 0]
      selector:
        color_rgb: {}

# ---------- Variables ----------
variables:
  base_color: !input base_color
  transition_color: !input transition_color
  meeting_color: !input meeting_color
  light: !input light_target
  transition_duration: !input transition_duration
  flash_interval: !input flash_interval
  transition_seconds: "{{ (as_timedelta(transition_duration)).total_seconds() | int }}"

# ---------- Triggers (one per selected calendar) ----------
trigger:
  - platform: calendar
    event: start
    entity_id: !input calendar_1
    offset: !input reminder_offset
    enabled: "{{ iif(calendar_1 is defined and calendar_1 is not none, true, false) }}"
  - platform: calendar
    event: start
    entity_id: !input calendar_2
    offset: !input reminder_offset
    enabled: "{{ iif(calendar_2 is defined and calendar_2 is not none, true, false) }}"
  - platform: calendar
    event: start
    entity_id: !input calendar_3
    offset: !input reminder_offset
    enabled: "{{ iif(calendar_3 is defined and calendar_3 is not none, true, false) }}"
  - platform: calendar
    event: start
    entity_id: !input calendar_4
    offset: !input reminder_offset
    enabled: "{{ iif(calendar_4 is defined and calendar_4 is not none, true, false) }}"
  - platform: calendar
    event: start
    entity_id: !input calendar_5
    offset: !input reminder_offset
    enabled: "{{ iif(calendar_5 is defined and calendar_5 is not none, true, false) }}"
  - platform: calendar
    event: start
    entity_id: !input calendar_6
    offset: !input reminder_offset
    enabled: "{{ iif(calendar_6 is defined and calendar_6 is not none, true, false) }}"

# ---------- Actions ----------
action:
  # Pre-meeting phase: either flash between transition & meeting color (optional) or hold transition color
  - choose:
      - conditions: "{{ transition_seconds > 0 }}"
        sequence:
          - repeat:
              count: "{{ max(1, (transition_seconds / (flash_interval * 2)) | int) }}"
              sequence:
                - action: light.turn_on
                  target: "{{ light }}"
                  data:
                    rgb_color: "{{ transition_color }}"
                    brightness: 255
                - delay:
                    seconds: "{{ flash_interval }}"
                - action: light.turn_on
                  target: "{{ light }}"
                  data:
                    rgb_color: "{{ meeting_color }}"
                    brightness: 255
                - delay:
                    seconds: "{{ flash_interval }}"
    default:
      - action: light.turn_on
        target: "{{ light }}"
        data:
          rgb_color: "{{ transition_color }}"
          brightness: 255
      - delay:
          seconds: "{{ transition_seconds }}"

  # Meeting starts: stay on meeting color until the event ends
  - action: light.turn_on
    target: "{{ light }}"
    data:
      rgb_color: "{{ meeting_color }}"
      brightness: 255

  # Wait exactly until this triggering event ends
  - delay:
      seconds: >
        {% set end = as_datetime(trigger.calendar_event.end) %}
        {{ (end.timestamp() - now().timestamp()) | max(0) | int }}

  # Meeting ended: return to base color
  - action: light.turn_on
    target: "{{ light }}"
    data:
      rgb_color: "{{ base_color }}"
      brightness: 255

mode: restart
