blueprint:
  name: Calendar Meeting Light Status
  description: >
    Sets a light to reflect meeting status—warns before, indicates during,
    and resets after. Fully customizable colors and durations; supports flashing.
  domain: automation

  input:
    calendar_entities:
      name: Calendar Entities
      description: One or more calendars to monitor.
      selector:
        entity:
          domain: calendar
          multiple: true

    light_target:
      name: Light Target
      selector:
        target:
          entity:
            domain: light

    reminder_offset:
      name: Reminder Time Before Meeting
      default: { minutes: 5 }
      selector:
        duration: {}

    transition_duration:
      name: Transition Flash Duration
      default: { minutes: 1 }
      selector:
        duration: {}

    flash_interval:
      name: Flash Interval Seconds
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: seconds

    base_color:
      name: Base Color (No Meeting)
      default: [0, 255, 0]
      selector:
        color_rgb: {}

    transition_color:
      name: Transition Color (Pre‑meeting)
      default: [255, 255, 0]
      selector:
        color_rgb: {}

    meeting_color:
      name: Meeting Color (During)
      default: [255, 0, 0]
      selector:
        color_rgb: {}

trigger:
  - platform: calendar
    event: start
    entity_id: !input calendar_entities
    offset: !input reminder_offset

variables:
  base_color: !input base_color
  transition_color: !input transition_color
  meeting_color: !input meeting_color
  light: !input light_target
  transition_seconds: "{{ (as_timedelta(!input transition_duration)).total_seconds() | int }}"
  flash_interval: !input flash_interval

action:
  - choose:
      - conditions: "{{ transition_seconds > 0 }}"
        sequence:
          - repeat:
              count: "{{ (transition_seconds / (flash_interval * 2)) | int }}"
              sequence:
                - service: light.turn_on
                  target: "{{ light }}"
                  data:
                    rgb_color: "{{ transition_color }}"
                    brightness: 255
                - delay:
                    seconds: "{{ flash_interval }}"
                - service: light.turn_on
                  target: "{{ light }}"
                  data:
                    rgb_color: "{{ meeting_color }}"
                    brightness: 255
                - delay:
                    seconds: "{{ flash_interval }}"
      - default:
          - service: light.turn_on
            target: "{{ light }}"
            data:
              rgb_color: "{{ transition_color }}"
              brightness: 255
          - delay:
              seconds: "{{ transition_seconds }}"

  - service: light.turn_on
    target: "{{ light }}"
    data:
      rgb_color: "{{ meeting_color }}"
      brightness: 255

  - delay:
      seconds: >
        {% set end = as_datetime(trigger.calendar_event.end) %}
        {{ (end.timestamp() - now().timestamp()) | max(0) | int }}

  - service: light.turn_on
    target: "{{ light }}"
    data:
      rgb_color: "{{ base_color }}"
      brightness: 255

mode: restart
