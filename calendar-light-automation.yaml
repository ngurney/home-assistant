blueprint:
  name: Calendar Meeting Light Status
  description: >
    Set a light to reflect meeting status from a calendarâ€”warn before, show during,
    and reset after. Fully configurable colors and timings. Optional flashing during the
    final pre-meeting window. Supports optional person/home check and a time window.
  domain: automation

  input:
    # Calendar & light
    calendar_entity:
      name: Calendar
      description: Calendar to monitor for events.
      selector:
        entity:
          domain: calendar

    light_target:
      name: Light Target
      description: Light to indicate meeting status.
      selector:
        target:
          entity:
            domain: light

    # Optional presence restriction
    person_entity:
      name: Person (optional)
      description: Only run when this person is home. Leave empty to always run.
      default: ""
      selector:
        entity:
          domain: person

    # Time window restriction
    active_start:
      name: Active window start time
      default: "07:00:00"
      selector: { time: {} }

    active_end:
      name: Active window end time
      default: "21:00:00"
      selector: { time: {} }

    active_weekdays:
      name: Active weekdays
      description: Only run on these days.
      default: [mon, tue, wed, thu, fri]
      selector:
        select:
          multiple: true
          mode: list
          options: [mon, tue, wed, thu, fri, sat, sun]

    # Calendar TRIGGER offset (must be a string like -HH:MM:SS)
    reminder_offset_str:
      name: Reminder offset (calendar trigger)
      description: >
        Offset relative to meeting start (negative for before).
        Example: -00:05:00 (five minutes before start).
      default: "-00:05:00"
      selector: { text: {} }

    # Final pre-meeting flashing window (derived from offset; set to 0 to disable)
    transition_duration:
      name: Final pre-meeting flashing window (0 = no flashing)
      description: In the final part of the pre-meeting window, optionally flash between transition and meeting colors.
      default: { minutes: 1 }
      selector: { duration: {} }

    flash_interval:
      name: Flash interval (seconds)
      description: Only used if transition_duration > 0.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          mode: slider
          unit_of_measurement: seconds

    # Colors
    base_color:
      name: Base color (no meeting)
      default: [0, 255, 0]
      selector:
        color_rgb: {}

    transition_color:
      name: Transition color (pre-meeting)
      default: [255, 255, 0]
      selector:
        color_rgb: {}

    meeting_color:
      name: Meeting color (during)
      default: [255, 0, 0]
      selector:
        color_rgb: {}

# ---------- Trigger ----------
trigger:
  - platform: calendar
    event: start
    entity_id: !input calendar_entity
    offset: !input reminder_offset_str

# ---------- Variables ----------
variables:
  # Inputs for templating
  person_id: !input person_entity
  base_color: !input base_color
  transition_color: !input transition_color
  meeting_color: !input meeting_color
  transition_duration: !input transition_duration
  flash_interval: !input flash_interval
  offset_str: !input reminder_offset_str

  # Parse the offset string (-HH:MM:SS or HH:MM:SS) to seconds magnitude
  # We use the absolute value as the total pre-meeting window length.
  _off_clean: "{{ (offset_str | trim) }}"
  _time_str: "{{ _off_clean.lstrip('+-') }}"
  pre_seconds: "{{ (as_timedelta(_time_str)).total_seconds() | int }}"
  transition_seconds: "{{ (as_timedelta(transition_duration)).total_seconds() | int }}"
  static_seconds: "{{ [pre_seconds - transition_seconds, 0] | max }}"

# ---------- Conditions ----------
condition:
  # Presence (optional). If no person selected (None/empty), allow; otherwise require 'home'.
  - condition: template
    value_template: >-
      {% set p = person_id %}
      {{ (not p) or is_state(p, 'home') }}

  # Time window (start/end/weekday)
  - condition: time
    after: !input active_start
    before: !input active_end
    weekday: !input active_weekdays

# ---------- Actions ----------
action:
  # 1) Pre-meeting: set transition color immediately at trigger.
  - service: light.turn_on
    target: !input light_target
    data:
      rgb_color: "{{ transition_color }}"
      brightness: 255
      transition: 2

  # 2) Hold transition color for the static pre-meeting portion (pre_seconds - transition_seconds).
  - delay:
      seconds: "{{ static_seconds }}"

  # 3) Final pre-meeting window: optional flashing between transition and meeting colors.
  - choose:
      - conditions: "{{ transition_seconds > 0 }}"
        sequence:
          - repeat:
              count: "{{ max(1, (transition_seconds / (flash_interval * 2)) | int) }}"
              sequence:
                - service: light.turn_on
                  target: !input light_target
                  data:
                    rgb_color: "{{ transition_color }}"
                    brightness: 255
                    transition: 1
                - delay:
                    seconds: "{{ flash_interval }}"
                - service: light.turn_on
                  target: !input light_target
                  data:
                    rgb_color: "{{ meeting_color }}"
                    brightness: 255
                    transition: 1
                - delay:
                    seconds: "{{ flash_interval }}"

  # 4) Meeting starts: stay on meeting color for the event duration.
  - service: light.turn_on
    target: !input light_target
    data:
      rgb_color: "{{ meeting_color }}"
      brightness: 255
      transition: 2

  # Wait exactly until this calendar event ends.
  - delay:
      seconds: >
        {% set end = as_datetime(trigger.calendar_event.end) %}
        {{ (end.timestamp() - now().timestamp()) | max(0) | int }}

  # 5) Meeting ended: return to base color.
  - service: light.turn_on
    target: !input light_target
    data:
      rgb_color: "{{ base_color }}"
      brightness: 255
      transition: 2

mode: restart
