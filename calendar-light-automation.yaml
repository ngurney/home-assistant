blueprint:
  name: Calendar Meeting Light Status
  description: >
    Set a light to reflect meeting status from a calendarâ€”warn before, show during, and reset after.
    Fully configurable colors and timings. Optional flashing in the final pre-meeting window.
  domain: automation

  input:
    calendar_entity:
      name: Calendar
      description: Calendar to monitor for events.
      selector:
        entity:
          domain: calendar

    light_target:
      name: Light Target
      description: Light to indicate meeting status.
      selector:
        target:
          entity:
            domain: light

    # Timing
    reminder_offset:
      name: Reminder time before meeting (switch to transition color or start flash window)
      default: { minutes: 5 }
      selector: { duration: {} }

    transition_duration:
      name: Final pre-meeting window (flashing). Set to 0 to disable flashing.
      default: { minutes: 1 }
      selector: { duration: {} }

    flash_interval:
      name: Flash interval (seconds)
      description: Only used if transition_duration > 0.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: seconds

    # Colors
    base_color:
      name: Base color (no meeting)
      default: [0, 255, 0]
      selector:
        color_rgb: {}

    transition_color:
      name: Transition color (pre-meeting)
      default: [255, 255, 0]
      selector:
        color_rgb: {}

    meeting_color:
      name: Meeting color (during)
      default: [255, 0, 0]
      selector:
        color_rgb: {}

# ---------- Trigger ----------
trigger:
  - platform: calendar
    event: start
    entity_id: !input calendar_entity
    offset: !input reminder_offset

# ---------- Variables ----------
variables:
  base_color: !input base_color
  transition_color: !input transition_color
  meeting_color: !input meeting_color
  light: !input light_target
  transition_duration: !input transition_duration
  flash_interval: !input flash_interval
  transition_seconds: "{{ (as_timedelta(transition_duration)).total_seconds() | int }}"

# ---------- Actions ----------
action:
  # Pre-meeting window:
  # If transition_duration > 0, flash between transition and meeting colors during that window.
  # Otherwise, just hold transition color until the meeting starts.
  - choose:
      - conditions: "{{ transition_seconds > 0 }}"
        sequence:
          - repeat:
              count: "{{ max(1, (transition_seconds / (flash_interval * 2)) | int) }}"
              sequence:
                - action: light.turn_on
                  target: "{{ light }}"
                  data:
                    rgb_color: "{{ transition_color }}"
                    brightness: 255
                - delay:
                    seconds: "{{ flash_interval }}"
                - action: light.turn_on
                  target: "{{ light }}"
                  data:
                    rgb_color: "{{ meeting_color }}"
                    brightness: 255
                - delay:
                    seconds: "{{ flash_interval }}"
    default:
      - action: light.turn_on
        target: "{{ light }}"
        data:
          rgb_color: "{{ transition_color }}"
          brightness: 255
      - delay:
          seconds: "{{ transition_seconds }}"

  # Meeting starts: stay on meeting color
  - action: light.turn_on
    target: "{{ light }}"
    data:
      rgb_color: "{{ meeting_color }}"
      brightness: 255

  # Wait until this event ends (uses the triggering calendar event end)
  - delay:
      seconds: >
        {% set end = as_datetime(trigger.calendar_event.end) %}
        {{ (end.timestamp() - now().timestamp()) | max(0) | int }}

  # Meeting ended: return to base color
  - action: light.turn_on
    target: "{{ light }}"
    data:
      rgb_color: "{{ base_color }}"
      brightness: 255

mode: restart
