blueprint:
  name: Door left open → Notify (services, repeat, iOS levels, only-people-home)
  description: >
    When any selected door is left open for the chosen duration, send a
    notification via one or more notify services. Optional: repeat reminders,
    iOS interruption levels, and notifying only mapped people who are HOME.
    Home Assistant 2024.8+.
  domain: automation

  input:
    doors:
      name: Door sensors
      description: Binary sensors with device_class door/opening.
      selector:
        entity:
          domain: binary_sensor
          device_class: [door, opening]
          multiple: true

    open_for:
      name: How long must it stay open?
      selector:
        duration: {}

    # Option A: plain list of notify services (always used when only_people_home = false)
    notify_services_csv:
      name: Notify services (comma-separated)
      description: >
        Enter one or more notify services, separated by commas.
        Examples: notify.mobile_app_your_iphone, notify.mobile_app_partners_iphone
        You can also use a notify group like: notify.family
      selector:
        text: {}
      default: ""

    # Option B: only notify mapped people who are home
    only_people_home:
      name: Notify only these people when they are HOME?
      description: >
        If enabled, the mapping below is used to select recipients dynamically
        based on person presence (state == 'home').
      default: false
      selector:
        boolean: {}

    people_services_map:
      name: People ↔︎ notify service mapping (one per line)
      description: |
        Format: person.entity_id = notify.service_name
        Examples:
          person.john = notify.mobile_app_john_iphone
          person.jane = notify.mobile_app_jane_iphone
        Only lines with '=' are parsed; blanks and comments (# ...) are ignored.
      selector:
        text:
          multiline: true
      default: ""

    title:
      name: Notification title
      default: "Door left open"
      selector:
        text: {}

    message:
      name: Notification message (templatable)
      description: >
        Placeholders:
        - {{ which }} → door that triggered
        - {{ open_list|join(', ') }} → all currently-open selected doors
        - {{ open_count }} → how many are open
      default: >-
        {{ which }} has been open for {{ (open_for.total_seconds()|int) }} seconds.
        Still open: {{ open_list|join(', ') }}.
      selector:
        text:
          multiline: true

    # ---- Repeat options ----
    repeat_enabled:
      name: Keep reminding until closed?
      default: true
      selector:
        boolean: {}

    repeat_every:
      name: Repeat interval
      default: { minutes: 2 }
      selector:
        duration: {}

    max_repeats:
      name: Max repeats (0 = unlimited)
      default: 0
      selector:
        number:
          min: 0
          max: 100
          mode: box
          unit_of_measurement: times

    # ---- iOS interruption level & critical options ----
    ios_interruption_level:
      name: iPhone notification level
      description: passive, active (default), time-sensitive, or critical.
      default: active
      selector:
        select:
          options: [passive, active, time-sensitive, critical]

    ios_critical_volume:
      name: Critical sound volume (if level = critical)
      description: 0.1–1.0 (1.0 is loudest). Uses default iOS sound unless you set a name.
      default: 1.0
      selector:
        number:
          min: 0.1
          max: 1.0
          step: 0.1
          mode: slider

    ios_sound_name:
      name: iOS sound name (optional)
      description: Bundled/custom sound (e.g., "default"). Leave blank for system default.
      default: ""
      selector:
        text: {}

mode: restart

# ---------- Variables ----------
variables:
  selected_doors: !input doors
  open_for: !input open_for
  repeat_enabled: !input repeat_enabled

  # User-provided notify services (CSV) -> list
  _notify_services_csv: !input notify_services_csv
  notify_services: >-
    {{ _notify_services_csv.split(',') | map('trim') | reject('equalto','') | list }}

  # Presence-gated mapping (multiline "person = notify.service")
  only_people_home: !input only_people_home
  _people_map_raw: !input people_services_map

  # Build a list of notify services whose person is currently 'home'
  home_notify_services: >-
    {% set ns = namespace(lst=[]) %}
    {% for raw in _people_map_raw.splitlines() %}
      {% set line = raw.strip() %}
      {% if not line or line.startswith('#') %}
        {# skip blanks/comments #}
      {% elif '=' in line %}
        {% set person = line.split('=')[0].strip() %}
        {% set service = line.split('=', 1)[1].strip() %}
        {% if person and service and states(person) == 'home' %}
          {% set ns.lst = ns.lst + [service] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {{ ns.lst }}

  # Final target list:
  targets: >-
    {% if only_people_home %}
      {{ home_notify_services }}
    {% else %}
      {{ notify_services }}
    {% endif %}

  # Build list of selected doors currently open
  open_list: >-
    {{ expand(selected_doors)
       | selectattr('state','eq','on')
       | map(attribute='name') | list }}
  open_count: "{{ open_list | length }}"

  which: >-
    {% if trigger is defined and trigger.to_state is not none -%}
      {{ trigger.to_state.name }}
    {%- else -%}{%- endif %}

  _title: !input title
  _message: !input message

  # iOS options
  _ios_level: !input ios_interruption_level
  _ios_volume: !input ios_critical_volume
  _ios_sound: !input ios_sound_name

# ---------- Trigger ----------
trigger:
  - platform: state
    entity_id: !input doors
    to: "on"
    for: !input open_for

# ---------- Condition (defensive) ----------
condition:
  - condition: template
    value_template: "{{ trigger.to_state.state == 'on' }}"

# ---------- Actions ----------
action:
  # Recompute open list at send time
  - variables:
      open_list: >-
        {{ expand(selected_doors)
           | selectattr('state','eq','on')
           | map(attribute='name') | list }}
      open_count: "{{ open_list | length }}"

  # iOS payload (ignored on Android)
  - variables:
      ios_push_block: >-
        {% set sound_name = _ios_sound|trim if _ios_sound|trim else 'default' %}
        {% if _ios_level == 'critical' %}
        {{ {
            "push": {
              "interruption-level": "critical",
              "sound": {
                "name": sound_name,
                "critical": 1,
                "volume": (_ios_volume|float)
              }
            }
          } }}
        {% else %}
        {{ { "push": { "interruption-level": _ios_level } } }}
        {% endif %}

  # --- Send to each chosen notify service ---
  - repeat:
      for_each: "{{ targets }}"
      sequence:
        - action: "{{ repeat.item }}"
          data:
            title: "{{ _title }}"
            message: "{{ _message }}"
            data: "{{ ios_push_block }}"

  # --- Optional repeat loop ---
  - if:
      - condition: template
        value_template: "{{ repeat_enabled | bool }}"
    then:
      - variables:
          _max: !input max_repeats
      - repeat:
          while:
            - condition: template
              value_template: >
                {% set any_open = expand(selected_doors)
                   | selectattr('state','eq','on') | list | length > 0 %}
                {% set idx = repeat.index | default(0) %}
                {% set under_limit = (_max|int == 0) or (idx < _max|int) %}
                {{ any_open and under_limit }}
          sequence:
            - delay: !input repeat_every

            - variables:
                open_list: >-
                  {{ expand(selected_doors)
                     | selectattr('state','eq','on')
                     | map(attribute='name') | list }}
                open_count: "{{ open_list | length }}"

                # Re-evaluate targets in case presence changed
                home_notify_services: >-
                  {% set ns = namespace(lst=[]) %}
                  {% for raw in _people_map_raw.splitlines() %}
                    {% set line = raw.strip() %}
                    {% if not line or line.startswith('#') %}
                    {% elif '=' in line %}
                      {% set person = line.split('=')[0].strip() %}
                      {% set service = line.split('=', 1)[1].strip() %}
                      {% if person and service and states(person) == 'home' %}
                        {% set ns.lst = ns.lst + [service] %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                  {{ ns.lst }}
                targets: >-
                  {% if only_people_home %}
                    {{ home_notify_services }}
                  {% else %}
                    {{ notify_services }}
                  {% endif %}

            - repeat:
                for_each: "{{ targets }}"
                sequence:
                  - action: "{{ repeat.item }}"
                    data:
                      title: "{{ _title }}"
                      message: "{{ _message }}"
                      data: "{{ ios_push_block }}"
