blueprint:
  name: Door left open → Notify (services CSV, repeat + iOS levels)
  description: >
    When any selected door is left open for the chosen duration, send a push
    to one or more notify services (comma-separated), e.g.:
      notify.mobile_app_your_iphone, notify.mobile_app_partners_iphone
    If you regularly notify many recipients, create a YAML notify group in
    configuration.yaml (platform: group) and use that single service here
    (e.g., notify.family). Home Assistant 2024.8+.
  domain: automation

  input:
    doors:
      name: Door sensors
      selector:
        entity:
          domain: binary_sensor
          device_class: [door, opening]
          multiple: true

    open_for:
      name: How long must it stay open?
      selector: { duration: {} }

    notify_services_csv:
      name: Notify services (comma-separated)
      description: >
        Enter one or more notify services separated by commas.
        Examples:
          notify.mobile_app_your_iphone, notify.mobile_app_partners_iphone
          notify.family   (a YAML notify group)
      default: ""
      selector: { text: {} }

    title:
      name: Notification title
      default: "Door left open"
      selector: { text: {} }

    message:
      name: Notification message (templatable)
      description: >
        Placeholders:
        - {{ which }} → door that triggered
        - {{ open_list|join(', ') }} → all currently-open selected doors
        - {{ open_count }} → how many are open
        - {{ open_minutes }} → how long (in minutes) at least one selected door has been open
      default: >-
        {{ which }} has been open for
        {{ open_minutes }} minute{% if open_minutes != 1 %}s{% endif %}.
        Still open: {{ open_list|join(', ') }}.
      selector:
        text:
          multiline: true

    repeat_enabled:
      name: Keep reminding until closed?
      default: true
      selector: { boolean: {} }

    repeat_every:
      name: Repeat interval
      default: { minutes: 2 }
      selector: { duration: {} }

    max_repeats:
      name: Max repeats (0 = unlimited)
      default: 0
      selector:
        number:
          min: 0
          max: 100
          mode: box
          unit_of_measurement: times

    ios_interruption_level:
      name: iPhone notification level
      description: passive, active (default), time-sensitive, or critical.
      default: active
      selector:
        select:
          options: [passive, active, time-sensitive, critical]

mode: restart

# ---------- Variables ----------
variables:
  selected_doors: !input doors
  open_for: !input open_for
  repeat_enabled: !input repeat_enabled

  _csv: !input notify_services_csv
  notify_services: >-
    {{ _csv.split(',') | map('trim') | reject('equalto','') | list }}

  open_list: >-
    {{ expand(selected_doors)
       | selectattr('state','eq','on')
       | map(attribute='name') | list }}
  open_count: "{{ open_list | length }}"

  open_minutes: >-
    {% set minutes = 0 %}
    {% for e in expand(selected_doors) | selectattr('state','eq','on') %}
      {% set age = (as_timestamp(now()) - as_timestamp(e.last_changed)) / 60 %}
      {% if age > minutes %}{% set minutes = age %}{% endif %}
    {% endfor %}
    {{ minutes | round(0) | int }}

  _title: !input title
  _message: !input message
  _ios_level: !input ios_interruption_level

# ---------- Trigger ----------
trigger:
  - platform: state
    entity_id: !input doors
    to: "on"
    for: !input open_for

# ---------- Condition ----------
condition:
  - condition: template
    value_template: "{{ trigger.to_state.state == 'on' }}"

# ---------- Actions ----------
action:
  - variables:
      open_list: >-
        {{ expand(selected_doors)
           | selectattr('state','eq','on')
           | map(attribute='name') | list }}
      open_count: "{{ open_list | length }}"
      open_minutes: >-
        {% set minutes = 0 %}
        {% for e in expand(selected_doors) | selectattr('state','eq','on') %}
          {% set age = (as_timestamp(now()) - as_timestamp(e.last_changed)) / 60 %}
          {% if age > minutes %}{% set minutes = age %}{% endif %}
        {% endfor %}
        {{ minutes | round(0) | int }}
      which: >-
        {% if trigger is defined and trigger.to_state is not none -%}
          {{ trigger.to_state.name }}
        {%- else -%}{%- endif %}

  - repeat:
      for_each: "{{ notify_services }}"
      sequence:
        - service: "{{ repeat.item }}"
          data:
            title: "{{ _title }}"
            message: "{{ _message }}"
            data:
              push:
                interruption-level: "{{ _ios_level }}"

  - if:
      - condition: template
        value_template: "{{ repeat_enabled | bool }}"
    then:
      - variables:
          _max: !input max_repeats
      - repeat:
          while:
            - condition: template
              value_template: >
                {% set any_open = expand(selected_doors)
                   | selectattr('state','eq','on') | list | length > 0 %}
                {% set idx = repeat.index | default(0) %}
                {% set under_limit = (_max|int == 0) or (idx < _max|int) %}
                {{ any_open and under_limit }}
          sequence:
            - delay: !input repeat_every

            - variables:
                open_list: >-
                  {{ expand(selected_doors)
                     | selectattr('state','eq','on')
                     | map(attribute='name') | list }}
                open_count: "{{ open_list | length }}"
                open_minutes: >-
                  {% set minutes = 0 %}
                  {% for e in expand(selected_doors) | selectattr('state','eq','on') %}
                    {% set age = (as_timestamp(now()) - as_timestamp(e.last_changed)) / 60 %}
                    {% if age > minutes %}{% set minutes = age %}{% endif %}
                  {% endfor %}
                  {{ minutes | round(0) | int }}

            - repeat:
                for_each: "{{ notify_services }}"
                sequence:
                  - service: "{{ repeat.item }}"
                    data:
                      title: "{{ _title }}"
                      message: "{{ _message }}"
                      data:
                        push:
                          interruption-level: "{{ _ios_level }}"
