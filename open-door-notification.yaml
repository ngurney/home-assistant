blueprint:
  name: Door left open → Notify phones (with repeat + iOS levels)
  description: >
    When any selected door is left open for the chosen duration, send a
    notification to selected mobile_app devices and (optionally) repeat
    until all selected doors are closed. Includes iOS interruption level
    (passive/active/time-sensitive/critical). Home Assistant 2024.8+ (uses Actions).
  domain: automation
  source_url: https://example.invalid/door-left-open-notify

  input:
    doors:
      name: Door sensors
      description: Pick one or more door sensors (binary_sensor, 'door' or 'opening').
      selector:
        entity:
          domain: binary_sensor
          device_class: [door, opening]
          multiple: true

    open_for:
      name: How long must it stay open?
      selector:
        duration: {}

    notify_devices:
      name: Phones to notify
      description: Devices from the mobile_app integration to receive the alert.
      selector:
        device:
          integration: mobile_app
          multiple: true

    title:
      name: Notification title
      default: "Door open"
      selector:
        text: {}

    message:
      name: Notification message (supports templates)
      description: >
        Placeholders you can use:
        - {{ which }} → the specific door that triggered
        - {{ open_list|join(', ') }} → all currently-open selected doors
        - {{ open_count }} → how many of the selected doors are open
      default: >-
        {{ which }} has been open for {{ (open_for.total_seconds() | int) }} seconds.
        Still open: {{ open_list|join(', ') }}.
      selector:
        text:
          multiline: true

    # ---- Repeat options ----
    repeat_enabled:
      name: Keep reminding until doors are closed?
      default: true
      selector:
        boolean: {}

    repeat_every:
      name: Repeat interval
      default:
        minutes: 2
      selector:
        duration: {}

    max_repeats:
      name: Max repeats (0 = unlimited)
      default: 0
      selector:
        number:
          min: 0
          max: 100
          mode: box
          unit_of_measurement: times

    # ---- iOS interruption level & critical options ----
    ios_interruption_level:
      name: iPhone notification level
      description: passive, active (default), time-sensitive, or critical.
      default: active
      selector:
        select:
          options:
            - passive
            - active
            - time-sensitive
            - critical

    ios_critical_volume:
      name: Critical sound volume (only if level = critical)
      description: 0.1–1.0 (1.0 is loudest). Uses default iOS sound unless you change "iOS sound name".
      default: 1.0
      selector:
        number:
          min: 0.1
          max: 1.0
          step: 0.1
          mode: slider

    ios_sound_name:
      name: iOS sound name (optional)
      description: Use a bundled/custom sound (e.g., "default"). Leave blank for system default.
      default: ""
      selector:
        text: {}

mode: restart

# ---------- Variables ----------
variables:
  selected_doors: !input doors
  open_for: !input open_for
  repeat_enabled: !input repeat_enabled

  # Build a list of selected doors currently open
  open_list: >-
    {{ expand(selected_doors)
       | selectattr('state','eq','on')
       | map(attribute='name')
       | list }}
  open_count: "{{ open_list | length }}"

  which: >-
    {% if trigger is defined and trigger.to_state is not none -%}
      {{ trigger.to_state.name }}
    {%- else -%}{%- endif %}

  _title: !input title
  _message: !input message

  # iOS options
  _ios_level: !input ios_interruption_level
  _ios_volume: !input ios_critical_volume
  _ios_sound: !input ios_sound_name

# ---------- Trigger ----------
trigger:
  - platform: state
    entity_id: !input doors
    to: "on"
    for: !input open_for

# ---------- Condition (defensive) ----------
condition:
  - condition: template
    value_template: "{{ trigger.to_state.state == 'on' }}"

# ---------- Actions ----------
action:
  # Always (re)compute the open list at send time
  - variables:
      open_list: >-
        {{ expand(selected_doors)
           | selectattr('state','eq','on')
           | map(attribute='name')
           | list }}
      open_count: "{{ open_list | length }}"

  # Craft iOS-specific payload (ignored on Android)
  - variables:
      ios_push_block: >-
        {% set sound_name = _ios_sound|trim if _ios_sound|trim else 'default' %}
        {% if _ios_level == 'critical' %}
        {{ {
            "push": {
              "interruption-level": "critical",
              "sound": {
                "name": sound_name,
                "critical": 1,
                "volume": (_ios_volume | float)
              }
            }
          } }}
        {% else %}
        {{ { "push": { "interruption-level": _ios_level } } }}
        {% endif %}

  # Initial send to each selected device
  - repeat:
      for_each: !input notify_devices
      sequence:
        - device_id: "{{ repeat.item }}"
          domain: mobile_app
          type: notify
          title: "{{ _title }}"
          message: "{{ _message }}"
          data: "{{ ios_push_block }}"

  # Optional repeat loop
  - if:
      - condition: template
        value_template: "{{ repeat_enabled | bool }}"
    then:
      - variables:
          _max: !input max_repeats
      - repeat:
          while:
            - condition: template
              value_template: >
                {% set any_open = expand(selected_doors)
                   | selectattr('state','eq','on')
                   | list | length > 0 %}
                {% set idx = repeat.index | default(0) %}
                {% set under_limit = (_max | int == 0) or (idx < _max | int) %}
                {{ any_open and under_limit }}
          sequence:
            - delay: !input repeat_every

            # Recompute list in case door states changed
            - variables:
                open_list: >-
                  {{ expand(selected_doors)
                     | selectattr('state','eq','on')
                     | map(attribute='name')
                     | list }}
                open_count: "{{ open_list | length }}"

            - repeat:
                for_each: !input notify_devices
                sequence:
                  - device_id: "{{ repeat.item }}"
                    domain: mobile_app
                    type: notify
                    title: "{{ _title }}"
                    message: "{{ _message }}"
                    data: "{{ ios_push_block }}"
